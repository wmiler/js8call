/****************************************************************************
**
** Namespace OmniRig generated by dumpcpp v6.6.3 using
** from the type library OmniRig.exe
**
****************************************************************************/


#if defined _WIN32_
#ifndef QAX_DUMPCPP_OMNIRIG_H
#define QAX_DUMPCPP_OMNIRIG_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef OMNIRIG_EXPORT
#define OMNIRIG_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace OmniRig {

    enum RigParamX {
        PM_UNKNOWN              = 1,
        PM_FREQ                 = 2,
        PM_FREQA                = 4,
        PM_FREQB                = 8,
        PM_PITCH                = 16,
        PM_RITOFFSET            = 32,
        PM_RIT0                 = 64,
        PM_VFOAA                = 128,
        PM_VFOAB                = 256,
        PM_VFOBA                = 512,
        PM_VFOBB                = 1024,
        PM_VFOA                 = 2048,
        PM_VFOB                 = 4096,
        PM_VFOEQUAL             = 8192,
        PM_VFOSWAP              = 16384,
        PM_SPLITON              = 32768,
        PM_SPLITOFF             = 65536,
        PM_RITON                = 131072,
        PM_RITOFF               = 262144,
        PM_XITON                = 524288,
        PM_XITOFF               = 1048576,
        PM_RX                   = 2097152,
        PM_TX                   = 4194304,
        PM_CW_U                 = 8388608,
        PM_CW_L                 = 16777216,
        PM_SSB_U                = 33554432,
        PM_SSB_L                = 67108864,
        PM_DIG_U                = 134217728,
        PM_DIG_L                = 268435456,
        PM_AM                   = 536870912,
        PM_FM                   = 1073741824
    };

    enum RigStatusX {
        ST_NOTCONFIGURED        = 0,
        ST_DISABLED             = 1,
        ST_PORTBUSY             = 2,
        ST_NOTRESPONDING        = 3,
        ST_ONLINE               = 4
    };

// forward declarations
    enum RigParamX;
    enum RigStatusX;
    class IRigX;
    class IPortBits;
    enum RigParamX;
    enum RigStatusX;

class OMNIRIG_EXPORT IOmniRigX : public QAxObject
{
public:
    IOmniRigX(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property DialogVisible
    */
    inline bool DialogVisible() const; //Returns the value of DialogVisible
    inline void SetDialogVisible(bool value); //Sets the value of the DialogVisible property

    /*
    Property InterfaceVersion
    */
    inline int InterfaceVersion() const; //Returns the value of InterfaceVersion

    /*
    Property Rig1
    */
    inline OmniRig::IRigX* Rig1() const; //Returns the value of Rig1

    /*
    Property Rig2
    */
    inline OmniRig::IRigX* Rig2() const; //Returns the value of Rig2

    /*
    Property SoftwareVersion
    */
    inline int SoftwareVersion() const; //Returns the value of SoftwareVersion

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface IOmniRigXEvents

class OMNIRIG_EXPORT IRigX : public QAxObject
{
public:
    IRigX(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Freq
    */
    inline int Freq() const; //Returns the value of Freq
    inline void SetFreq(int value); //Sets the value of the Freq property

    /*
    Property FreqA
    */
    inline int FreqA() const; //Returns the value of FreqA
    inline void SetFreqA(int value); //Sets the value of the FreqA property

    /*
    Property FreqB
    */
    inline int FreqB() const; //Returns the value of FreqB
    inline void SetFreqB(int value); //Sets the value of the FreqB property

    /*
    Property Mode
    */
    inline OmniRig::RigParamX Mode() const; //Returns the value of Mode
    inline void SetMode(OmniRig::RigParamX value); //Sets the value of the Mode property

    /*
    Property Pitch
    */
    inline int Pitch() const; //Returns the value of Pitch
    inline void SetPitch(int value); //Sets the value of the Pitch property

    /*
    Property PortBits
    */
    inline OmniRig::IPortBits* PortBits() const; //Returns the value of PortBits

    /*
    Property ReadableParams
    */
    inline int ReadableParams() const; //Returns the value of ReadableParams

    /*
    Property RigType
    */
    inline QString RigType() const; //Returns the value of RigType

    /*
    Property Rit
    */
    inline OmniRig::RigParamX Rit() const; //Returns the value of Rit
    inline void SetRit(OmniRig::RigParamX value); //Sets the value of the Rit property

    /*
    Property RitOffset
    */
    inline int RitOffset() const; //Returns the value of RitOffset
    inline void SetRitOffset(int value); //Sets the value of the RitOffset property

    /*
    Property Split
    */
    inline OmniRig::RigParamX Split() const; //Returns the value of Split
    inline void SetSplit(OmniRig::RigParamX value); //Sets the value of the Split property

    /*
    Property Status
    */
    inline OmniRig::RigStatusX Status() const; //Returns the value of Status

    /*
    Property StatusStr
    */
    inline QString StatusStr() const; //Returns the value of StatusStr

    /*
    Property Tx
    */
    inline OmniRig::RigParamX Tx() const; //Returns the value of Tx
    inline void SetTx(OmniRig::RigParamX value); //Sets the value of the Tx property

    /*
    Property Vfo
    */
    inline OmniRig::RigParamX Vfo() const; //Returns the value of Vfo
    inline void SetVfo(OmniRig::RigParamX value); //Sets the value of the Vfo property

    /*
    Property WriteableParams
    */
    inline int WriteableParams() const; //Returns the value of WriteableParams

    /*
    Property Xit
    */
    inline OmniRig::RigParamX Xit() const; //Returns the value of Xit
    inline void SetXit(OmniRig::RigParamX value); //Sets the value of the Xit property

    /*
    Method ClearRit
    */
    inline void ClearRit();

    /*
    Method FrequencyOfTone
    */
    inline int FrequencyOfTone(int Tone);

    /*
    Method GetRxFrequency
    */
    inline int GetRxFrequency();

    /*
    Method GetTxFrequency
    */
    inline int GetTxFrequency();

    /*
    Method IsParamReadable
    */
    inline bool IsParamReadable(OmniRig::RigParamX Param);

    /*
    Method IsParamWriteable
    */
    inline bool IsParamWriteable(OmniRig::RigParamX Param);

    /*
    Method SendCustomCommand
    */
    inline void SendCustomCommand(const QVariant& Command, int ReplyLength, const QVariant& ReplyEnd);

    /*
    Method SetSimplexMode
    */
    inline void SetSimplexMode(int Freq);

    /*
    Method SetSplitMode
    */
    inline void SetSplitMode(int RxFreq, int TxFreq);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OMNIRIG_EXPORT IPortBits : public QAxObject
{
public:
    IPortBits(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property Cts
    */
    inline bool Cts() const; //Returns the value of Cts

    /*
    Property Dsr
    */
    inline bool Dsr() const; //Returns the value of Dsr

    /*
    Property Dtr
    */
    inline bool Dtr() const; //Returns the value of Dtr
    inline void SetDtr(bool value); //Sets the value of the Dtr property

    /*
    Property Rts
    */
    inline bool Rts() const; //Returns the value of Rts
    inline void SetRts(bool value); //Sets the value of the Rts property

    /*
    Method Lock
    */
    inline bool Lock();

    /*
    Method Unlock
    */
    inline void Unlock();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class OMNIRIG_EXPORT OmniRigX : public QAxObject
{
public:
    OmniRigX(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{0839e8c6-ed30-4950-8087-966f970f0cae}");
    }

    OmniRigX(IOmniRigX *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DialogVisible
    */
    inline bool DialogVisible() const; //Returns the value of DialogVisible
    inline void SetDialogVisible(bool value); //Sets the value of the DialogVisible property

    /*
    Property InterfaceVersion
    */
    inline int InterfaceVersion() const; //Returns the value of InterfaceVersion

    /*
    Property Rig1
    */
    inline OmniRig::IRigX* Rig1() const; //Returns the value of Rig1

    /*
    Property Rig2
    */
    inline OmniRig::IRigX* Rig2() const; //Returns the value of Rig2

    /*
    Property SoftwareVersion
    */
    inline int SoftwareVersion() const; //Returns the value of SoftwareVersion

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OMNIRIG_EXPORT RigX : public QAxObject
{
public:
    RigX(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{78aecfa2-3f52-4e39-98d3-1646c00a6234}");
    }

    RigX(IRigX *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Freq
    */
    inline int Freq() const; //Returns the value of Freq
    inline void SetFreq(int value); //Sets the value of the Freq property

    /*
    Property FreqA
    */
    inline int FreqA() const; //Returns the value of FreqA
    inline void SetFreqA(int value); //Sets the value of the FreqA property

    /*
    Property FreqB
    */
    inline int FreqB() const; //Returns the value of FreqB
    inline void SetFreqB(int value); //Sets the value of the FreqB property

    /*
    Property Mode
    */
    inline OmniRig::RigParamX Mode() const; //Returns the value of Mode
    inline void SetMode(OmniRig::RigParamX value); //Sets the value of the Mode property

    /*
    Property Pitch
    */
    inline int Pitch() const; //Returns the value of Pitch
    inline void SetPitch(int value); //Sets the value of the Pitch property

    /*
    Property PortBits
    */
    inline OmniRig::IPortBits* PortBits() const; //Returns the value of PortBits

    /*
    Property ReadableParams
    */
    inline int ReadableParams() const; //Returns the value of ReadableParams

    /*
    Property RigType
    */
    inline QString RigType() const; //Returns the value of RigType

    /*
    Property Rit
    */
    inline OmniRig::RigParamX Rit() const; //Returns the value of Rit
    inline void SetRit(OmniRig::RigParamX value); //Sets the value of the Rit property

    /*
    Property RitOffset
    */
    inline int RitOffset() const; //Returns the value of RitOffset
    inline void SetRitOffset(int value); //Sets the value of the RitOffset property

    /*
    Property Split
    */
    inline OmniRig::RigParamX Split() const; //Returns the value of Split
    inline void SetSplit(OmniRig::RigParamX value); //Sets the value of the Split property

    /*
    Property Status
    */
    inline OmniRig::RigStatusX Status() const; //Returns the value of Status

    /*
    Property StatusStr
    */
    inline QString StatusStr() const; //Returns the value of StatusStr

    /*
    Property Tx
    */
    inline OmniRig::RigParamX Tx() const; //Returns the value of Tx
    inline void SetTx(OmniRig::RigParamX value); //Sets the value of the Tx property

    /*
    Property Vfo
    */
    inline OmniRig::RigParamX Vfo() const; //Returns the value of Vfo
    inline void SetVfo(OmniRig::RigParamX value); //Sets the value of the Vfo property

    /*
    Property WriteableParams
    */
    inline int WriteableParams() const; //Returns the value of WriteableParams

    /*
    Property Xit
    */
    inline OmniRig::RigParamX Xit() const; //Returns the value of Xit
    inline void SetXit(OmniRig::RigParamX value); //Sets the value of the Xit property

    /*
    Method ClearRit
    */
    inline void ClearRit();

    /*
    Method FrequencyOfTone
    */
    inline int FrequencyOfTone(int Tone);

    /*
    Method GetRxFrequency
    */
    inline int GetRxFrequency();

    /*
    Method GetTxFrequency
    */
    inline int GetTxFrequency();

    /*
    Method IsParamReadable
    */
    inline bool IsParamReadable(OmniRig::RigParamX Param);

    /*
    Method IsParamWriteable
    */
    inline bool IsParamWriteable(OmniRig::RigParamX Param);

    /*
    Method SendCustomCommand
    */
    inline void SendCustomCommand(const QVariant& Command, int ReplyLength, const QVariant& ReplyEnd);

    /*
    Method SetSimplexMode
    */
    inline void SetSimplexMode(int Freq);

    /*
    Method SetSplitMode
    */
    inline void SetSplitMode(int RxFreq, int TxFreq);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class OMNIRIG_EXPORT PortBits : public QAxObject
{
public:
    PortBits(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{b786de29-3b3d-4c66-b7c4-547f9a77a21d}");
    }

    PortBits(IPortBits *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Cts
    */
    inline bool Cts() const; //Returns the value of Cts

    /*
    Property Dsr
    */
    inline bool Dsr() const; //Returns the value of Dsr

    /*
    Property Dtr
    */
    inline bool Dtr() const; //Returns the value of Dtr
    inline void SetDtr(bool value); //Sets the value of the Dtr property

    /*
    Property Rts
    */
    inline bool Rts() const; //Returns the value of Rts
    inline void SetRts(bool value); //Sets the value of the Rts property

    /*
    Method Lock
    */
    inline bool Lock();

    /*
    Method Unlock
    */
    inline void Unlock();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_OMNIRIG_NOINLINES
inline bool IOmniRigX::DialogVisible() const
{
    QVariant qax_result = property("DialogVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IOmniRigX::SetDialogVisible(bool value){ setProperty("DialogVisible", QVariant(value)); }

inline int IOmniRigX::InterfaceVersion() const
{
    QVariant qax_result = property("InterfaceVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline OmniRig::IRigX* IOmniRigX::Rig1() const
{
    OmniRig::IRigX* qax_pointer = 0;
    qRegisterMetaType<OmniRig::IRigX*>("IRigX*", &qax_pointer);
    qRegisterMetaType<OmniRig::IRigX>("IRigX", qax_pointer);
    QVariant qax_result = property("Rig1");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::IRigX**)qax_result.constData();
}

inline OmniRig::IRigX* IOmniRigX::Rig2() const
{
    OmniRig::IRigX* qax_pointer = 0;
    qRegisterMetaType<OmniRig::IRigX*>("IRigX*", &qax_pointer);
    qRegisterMetaType<OmniRig::IRigX>("IRigX", qax_pointer);
    QVariant qax_result = property("Rig2");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::IRigX**)qax_result.constData();
}

inline int IOmniRigX::SoftwareVersion() const
{
    QVariant qax_result = property("SoftwareVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}


inline bool OmniRigX::DialogVisible() const
{
    QVariant qax_result = property("DialogVisible");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void OmniRigX::SetDialogVisible(bool value){ setProperty("DialogVisible", QVariant(value)); }

inline int OmniRigX::InterfaceVersion() const
{
    QVariant qax_result = property("InterfaceVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline OmniRig::IRigX* OmniRigX::Rig1() const
{
    OmniRig::IRigX* qax_pointer = 0;
    qRegisterMetaType<OmniRig::IRigX*>("IRigX*", &qax_pointer);
    qRegisterMetaType<OmniRig::IRigX>("IRigX", qax_pointer);
    QVariant qax_result = property("Rig1");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::IRigX**)qax_result.constData();
}

inline OmniRig::IRigX* OmniRigX::Rig2() const
{
    OmniRig::IRigX* qax_pointer = 0;
    qRegisterMetaType<OmniRig::IRigX*>("IRigX*", &qax_pointer);
    qRegisterMetaType<OmniRig::IRigX>("IRigX", qax_pointer);
    QVariant qax_result = property("Rig2");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::IRigX**)qax_result.constData();
}

inline int OmniRigX::SoftwareVersion() const
{
    QVariant qax_result = property("SoftwareVersion");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}


inline int IRigX::Freq() const
{
    QVariant qax_result = property("Freq");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IRigX::SetFreq(int value){ setProperty("Freq", QVariant(value)); }

inline int IRigX::FreqA() const
{
    QVariant qax_result = property("FreqA");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IRigX::SetFreqA(int value){ setProperty("FreqA", QVariant(value)); }

inline int IRigX::FreqB() const
{
    QVariant qax_result = property("FreqB");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IRigX::SetFreqB(int value){ setProperty("FreqB", QVariant(value)); }

inline OmniRig::RigParamX IRigX::Mode() const
{
    QVariant qax_result = property("Mode");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void IRigX::SetMode(OmniRig::RigParamX value){ setProperty("Mode", QVariant(value)); }

inline int IRigX::Pitch() const
{
    QVariant qax_result = property("Pitch");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IRigX::SetPitch(int value){ setProperty("Pitch", QVariant(value)); }

inline OmniRig::IPortBits* IRigX::PortBits() const
{
    OmniRig::IPortBits* qax_pointer = 0;
    qRegisterMetaType<OmniRig::IPortBits*>("IPortBits*", &qax_pointer);
    qRegisterMetaType<OmniRig::IPortBits>("IPortBits", qax_pointer);
    QVariant qax_result = property("PortBits");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::IPortBits**)qax_result.constData();
}

inline int IRigX::ReadableParams() const
{
    QVariant qax_result = property("ReadableParams");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString IRigX::RigType() const
{
    QVariant qax_result = property("RigType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline OmniRig::RigParamX IRigX::Rit() const
{
    QVariant qax_result = property("Rit");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void IRigX::SetRit(OmniRig::RigParamX value){ setProperty("Rit", QVariant(value)); }

inline int IRigX::RitOffset() const
{
    QVariant qax_result = property("RitOffset");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IRigX::SetRitOffset(int value){ setProperty("RitOffset", QVariant(value)); }

inline OmniRig::RigParamX IRigX::Split() const
{
    QVariant qax_result = property("Split");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void IRigX::SetSplit(OmniRig::RigParamX value){ setProperty("Split", QVariant(value)); }

inline OmniRig::RigStatusX IRigX::Status() const
{
    QVariant qax_result = property("Status");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigStatusX*)qax_result.constData();
}

inline QString IRigX::StatusStr() const
{
    QVariant qax_result = property("StatusStr");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline OmniRig::RigParamX IRigX::Tx() const
{
    QVariant qax_result = property("Tx");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void IRigX::SetTx(OmniRig::RigParamX value){ setProperty("Tx", QVariant(value)); }

inline OmniRig::RigParamX IRigX::Vfo() const
{
    QVariant qax_result = property("Vfo");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void IRigX::SetVfo(OmniRig::RigParamX value){ setProperty("Vfo", QVariant(value)); }

inline int IRigX::WriteableParams() const
{
    QVariant qax_result = property("WriteableParams");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline OmniRig::RigParamX IRigX::Xit() const
{
    QVariant qax_result = property("Xit");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void IRigX::SetXit(OmniRig::RigParamX value){ setProperty("Xit", QVariant(value)); }

inline void IRigX::ClearRit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline int IRigX::FrequencyOfTone(int Tone)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Tone};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int IRigX::GetRxFrequency()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int IRigX::GetTxFrequency()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IRigX::IsParamReadable(OmniRig::RigParamX Param)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Param};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool IRigX::IsParamWriteable(OmniRig::RigParamX Param)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Param};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IRigX::SendCustomCommand(const QVariant& Command, int ReplyLength, const QVariant& ReplyEnd)
{
    void *_a[] = {0, (void*)&Command, (void*)&ReplyLength, (void*)&ReplyEnd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IRigX::SetSimplexMode(int Freq)
{
    void *_a[] = {0, (void*)&Freq};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IRigX::SetSplitMode(int RxFreq, int TxFreq)
{
    void *_a[] = {0, (void*)&RxFreq, (void*)&TxFreq};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}


inline int RigX::Freq() const
{
    QVariant qax_result = property("Freq");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void RigX::SetFreq(int value){ setProperty("Freq", QVariant(value)); }

inline int RigX::FreqA() const
{
    QVariant qax_result = property("FreqA");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void RigX::SetFreqA(int value){ setProperty("FreqA", QVariant(value)); }

inline int RigX::FreqB() const
{
    QVariant qax_result = property("FreqB");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void RigX::SetFreqB(int value){ setProperty("FreqB", QVariant(value)); }

inline OmniRig::RigParamX RigX::Mode() const
{
    QVariant qax_result = property("Mode");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void RigX::SetMode(OmniRig::RigParamX value){ setProperty("Mode", QVariant(value)); }

inline int RigX::Pitch() const
{
    QVariant qax_result = property("Pitch");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void RigX::SetPitch(int value){ setProperty("Pitch", QVariant(value)); }

inline OmniRig::IPortBits* RigX::PortBits() const
{
    OmniRig::IPortBits* qax_pointer = 0;
    qRegisterMetaType<OmniRig::IPortBits*>("IPortBits*", &qax_pointer);
    qRegisterMetaType<OmniRig::IPortBits>("IPortBits", qax_pointer);
    QVariant qax_result = property("PortBits");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::IPortBits**)qax_result.constData();
}

inline int RigX::ReadableParams() const
{
    QVariant qax_result = property("ReadableParams");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString RigX::RigType() const
{
    QVariant qax_result = property("RigType");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline OmniRig::RigParamX RigX::Rit() const
{
    QVariant qax_result = property("Rit");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void RigX::SetRit(OmniRig::RigParamX value){ setProperty("Rit", QVariant(value)); }

inline int RigX::RitOffset() const
{
    QVariant qax_result = property("RitOffset");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void RigX::SetRitOffset(int value){ setProperty("RitOffset", QVariant(value)); }

inline OmniRig::RigParamX RigX::Split() const
{
    QVariant qax_result = property("Split");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void RigX::SetSplit(OmniRig::RigParamX value){ setProperty("Split", QVariant(value)); }

inline OmniRig::RigStatusX RigX::Status() const
{
    QVariant qax_result = property("Status");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigStatusX*)qax_result.constData();
}

inline QString RigX::StatusStr() const
{
    QVariant qax_result = property("StatusStr");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline OmniRig::RigParamX RigX::Tx() const
{
    QVariant qax_result = property("Tx");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void RigX::SetTx(OmniRig::RigParamX value){ setProperty("Tx", QVariant(value)); }

inline OmniRig::RigParamX RigX::Vfo() const
{
    QVariant qax_result = property("Vfo");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void RigX::SetVfo(OmniRig::RigParamX value){ setProperty("Vfo", QVariant(value)); }

inline int RigX::WriteableParams() const
{
    QVariant qax_result = property("WriteableParams");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline OmniRig::RigParamX RigX::Xit() const
{
    QVariant qax_result = property("Xit");
    Q_ASSERT(qax_result.isValid());
    return *(OmniRig::RigParamX*)qax_result.constData();
}
inline void RigX::SetXit(OmniRig::RigParamX value){ setProperty("Xit", QVariant(value)); }

inline void RigX::ClearRit()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline int RigX::FrequencyOfTone(int Tone)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Tone};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline int RigX::GetRxFrequency()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline int RigX::GetTxFrequency()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool RigX::IsParamReadable(OmniRig::RigParamX Param)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Param};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool RigX::IsParamWriteable(OmniRig::RigParamX Param)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Param};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void RigX::SendCustomCommand(const QVariant& Command, int ReplyLength, const QVariant& ReplyEnd)
{
    void *_a[] = {0, (void*)&Command, (void*)&ReplyLength, (void*)&ReplyEnd};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void RigX::SetSimplexMode(int Freq)
{
    void *_a[] = {0, (void*)&Freq};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void RigX::SetSplitMode(int RxFreq, int TxFreq)
{
    void *_a[] = {0, (void*)&RxFreq, (void*)&TxFreq};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}


inline bool IPortBits::Cts() const
{
    QVariant qax_result = property("Cts");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IPortBits::Dsr() const
{
    QVariant qax_result = property("Dsr");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool IPortBits::Dtr() const
{
    QVariant qax_result = property("Dtr");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IPortBits::SetDtr(bool value){ setProperty("Dtr", QVariant(value)); }

inline bool IPortBits::Rts() const
{
    QVariant qax_result = property("Rts");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void IPortBits::SetRts(bool value){ setProperty("Rts", QVariant(value)); }

inline bool IPortBits::Lock()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IPortBits::Unlock()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline bool PortBits::Cts() const
{
    QVariant qax_result = property("Cts");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool PortBits::Dsr() const
{
    QVariant qax_result = property("Dsr");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool PortBits::Dtr() const
{
    QVariant qax_result = property("Dtr");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void PortBits::SetDtr(bool value){ setProperty("Dtr", QVariant(value)); }

inline bool PortBits::Rts() const
{
    QVariant qax_result = property("Rts");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void PortBits::SetRts(bool value){ setProperty("Rts", QVariant(value)); }

inline bool PortBits::Lock()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void PortBits::Unlock()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<OmniRig::IOmniRigX, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<OmniRig::IOmniRigX*>(t)->OmniRig::IOmniRigX::~IOmniRigX();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) OmniRig::IOmniRigX;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const OmniRig::IOmniRigX*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<OmniRig::IOmniRigX*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<OmniRig::OmniRigX, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<OmniRig::OmniRigX*>(t)->OmniRig::OmniRigX::~OmniRigX();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) OmniRig::OmniRigX;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const OmniRig::OmniRigX*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<OmniRig::OmniRigX*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<OmniRig::IRigX, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<OmniRig::IRigX*>(t)->OmniRig::IRigX::~IRigX();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) OmniRig::IRigX;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const OmniRig::IRigX*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<OmniRig::IRigX*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<OmniRig::RigX, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<OmniRig::RigX*>(t)->OmniRig::RigX::~RigX();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) OmniRig::RigX;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const OmniRig::RigX*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<OmniRig::RigX*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<OmniRig::IPortBits, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<OmniRig::IPortBits*>(t)->OmniRig::IPortBits::~IPortBits();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) OmniRig::IPortBits;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const OmniRig::IPortBits*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<OmniRig::IPortBits*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<OmniRig::PortBits, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<OmniRig::PortBits*>(t)->OmniRig::PortBits::~PortBits();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) OmniRig::PortBits;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const OmniRig::PortBits*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<OmniRig::PortBits*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif
#endif
